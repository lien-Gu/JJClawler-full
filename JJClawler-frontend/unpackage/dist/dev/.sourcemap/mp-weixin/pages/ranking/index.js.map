{"version":3,"file":"index.js","sources":["pages/ranking/index.vue","pages/ranking/index.vue?type=page"],"sourcesContent":["<template>\n  <view class=\"ranking-page\">\n    <!-- 搜索栏 -->\n    <view class=\"search-section\">\n      <view class=\"search-container\">\n        <view class=\"search-icon\">🔍</view>\n        <input \n          class=\"search-input\" \n          type=\"text\" \n          placeholder=\"搜索\"\n          v-model=\"searchKeyword\"\n          @input=\"onSearchInput\"\n        />\n      </view>\n    </view>\n    \n    <!-- 第一层级：分站选择 -->\n    <view class=\"sites-section\">\n      <scroll-view class=\"sites-scroll\" scroll-x>\n        <view class=\"sites-container\">\n          <view \n            class=\"site-tag\"\n            :class=\"{ active: selectedSite && selectedSite.id === site.id }\"\n            v-for=\"site in sites\" \n            :key=\"site.id\"\n            @tap=\"selectSite(site)\"\n          >\n            <text class=\"site-text\">{{ site.name }}</text>\n          </view>\n        </view>\n      </scroll-view>\n    </view>\n    \n    <!-- 第二层级：频道选择（仅复杂分站显示） -->\n    <view v-if=\"selectedSite && selectedSite.type === 'complex'\" class=\"channels-section\">\n      <scroll-view class=\"channels-scroll\" scroll-x>\n        <view class=\"channels-container\">\n          <view \n            class=\"channel-tag\"\n            :class=\"{ active: selectedChannel && selectedChannel.id === channel.id }\"\n            v-for=\"channel in currentChannels\" \n            :key=\"channel.id\"\n            @tap=\"selectChannel(channel)\"\n          >\n            <text class=\"channel-text\">{{ channel.name }}</text>\n          </view>\n        </view>\n      </scroll-view>\n    </view>\n    \n    <!-- 第三层级：内容显示 -->\n    <view class=\"content-section\">\n      <!-- 夹子：显示书籍列表 -->\n      <view v-if=\"selectedSite && selectedSite.id === 'jj' && level === 3\" class=\"books-section\">\n        <BookList \n          :books=\"books\"\n          :title=\"currentRankingTitle\"\n          :show-count=\"true\"\n          :show-rank=\"true\"\n          :show-actions=\"false\"\n          @book-tap=\"handleBookTap\"\n        />\n      </view>\n      \n      <!-- 其他分站：显示榜单列表 -->\n      <view v-else-if=\"selectedSite && level >= 2\" class=\"rankings-section\">\n        <view class=\"rankings-list\">\n          <view \n            class=\"ranking-item\" \n            v-for=\"ranking in currentRankings\" \n            :key=\"ranking.id\"\n            @tap=\"goToRankingDetail(ranking)\"\n          >\n            <text class=\"ranking-name\">{{ ranking.name }}</text>\n          </view>\n        </view>\n      </view>\n    </view>\n  </view>\n</template>\n\n<script>\nimport { getSitesList, getSiteById, getChannelsBySiteId } from '@/data/url.js'\nimport BookList from '@/components/BookList.vue'\n\n/**\n * 榜单页面\n * @description 多层级导航展示榜单和书籍信息，按照Figma设计样式\n */\nexport default {\n  name: 'RankingPage',\n  \n  components: {\n    BookList\n  },\n  \n  data() {\n    return {\n      searchKeyword: '',\n      sites: [],\n      selectedSite: null,\n      selectedChannel: null,\n      currentChannels: [],\n      currentRankings: [],\n      books: [],\n      level: 1, // 1: 分站选择, 2: 频道选择, 3: 内容显示\n      currentRankingTitle: ''\n    }\n  },\n  \n  onLoad(options) {\n    this.initData()\n    \n    // 处理外部传入的参数\n    if (options.site) {\n      const site = getSiteById(options.site)\n      if (site) {\n        this.selectSite(site)\n      }\n    } else {\n      // 没有外部参数时，尝试恢复历史选择\n      this.restoreLastSelection()\n    }\n  },\n  \n  methods: {\n    /**\n     * 初始化数据\n     */\n    initData() {\n      try {\n        this.sites = getSitesList()\n        console.log('加载分站列表:', this.sites)\n      } catch (error) {\n        console.error('加载分站数据失败:', error)\n        // 提供备用数据\n        this.sites = [\n          { id: 'jj', name: '夹子', type: 'special' },\n          { id: 'shu', name: '书城', type: 'simple' },\n          { id: 'yan', name: '言情', type: 'complex' }\n        ]\n      }\n    },\n    \n    /**\n     * 恢复上次选择的tab\n     */\n    restoreLastSelection() {\n      try {\n        const lastSelection = uni.getStorageSync('ranking_last_selection')\n        if (lastSelection && lastSelection.siteId) {\n          console.log('恢复历史选择:', lastSelection)\n          const site = getSiteById(lastSelection.siteId)\n          if (site) {\n            this.selectSite(site, false) // 不保存历史，避免重复保存\n            \n            // 如果有频道选择历史，也恢复\n            if (lastSelection.channelId && site.type === 'complex') {\n              const channels = getChannelsBySiteId(site.id)\n              const channel = channels.find(ch => ch.id === lastSelection.channelId)\n              if (channel) {\n                setTimeout(() => {\n                  this.selectChannel(channel, false)\n                }, 100)\n              }\n            }\n            return\n          }\n        }\n      } catch (error) {\n        console.error('恢复历史选择失败:', error)\n      }\n      \n      // 没有历史信息或恢复失败，默认选中夹子\n      const jiaziSite = this.sites.find(site => site.id === 'jj')\n      if (jiaziSite) {\n        this.selectSite(jiaziSite)\n      }\n    },\n\n    /**\n     * 保存当前选择到历史\n     */\n    saveCurrentSelection() {\n      try {\n        const selection = {\n          siteId: this.selectedSite?.id,\n          channelId: this.selectedChannel?.id,\n          timestamp: Date.now()\n        }\n        uni.setStorageSync('ranking_last_selection', selection)\n        console.log('保存选择历史:', selection)\n      } catch (error) {\n        console.error('保存选择历史失败:', error)\n      }\n    },\n\n    /**\n     * 选择分站\n     */\n    selectSite(site, saveHistory = true) {\n      this.selectedSite = site\n      this.selectedChannel = null\n      this.level = 2\n      \n      console.log('选择分站:', site)\n      \n      // 保存选择历史\n      if (saveHistory) {\n        this.saveCurrentSelection()\n      }\n      \n      if (site.type === 'special' && site.id === 'jj') {\n        // 夹子：直接显示书籍列表\n        this.level = 3\n        this.currentRankingTitle = '夹子榜单'\n        this.loadJiaziBooks()\n      } else if (site.type === 'complex') {\n        // 复杂分站：显示分站榜单 + 频道选择\n        this.currentChannels = getChannelsBySiteId(site.id)\n        this.loadSiteRankings(site)\n      } else {\n        // 简单分站：直接显示榜单\n        this.loadSiteRankings(site)\n      }\n    },\n    \n    /**\n     * 选择频道\n     */\n    selectChannel(channel, saveHistory = true) {\n      this.selectedChannel = channel\n      this.level = 3\n      console.log('选择频道:', channel)\n      \n      // 保存选择历史\n      if (saveHistory) {\n        this.saveCurrentSelection()\n      }\n      \n      this.loadChannelRankings(this.selectedSite, channel)\n    },\n    \n    /**\n     * 加载分站榜单\n     */\n    loadSiteRankings(site) {\n      // 模拟分站榜单数据\n      const siteRankings = {\n        jj: [\n          { id: 'jj_main', name: '夹子总榜', type: 'books' },\n          { id: 'jj_rising', name: '夹子新星榜', type: 'books' },\n          { id: 'jj_hot', name: '夹子热门榜', type: 'books' }\n        ],\n        shu: [\n          { id: 'shu_hot', name: '热门榜' },\n          { id: 'shu_new', name: '新书榜' },\n          { id: 'shu_finish', name: '完结榜' }\n        ],\n        yan: [\n          { id: 'yan_monthly', name: '月榜' },\n          { id: 'yan_weekly', name: '周榜' },\n          { id: 'yan_daily', name: '日榜' }\n        ],\n        chun: [\n          { id: 'chun_popular', name: '人气榜' },\n          { id: 'chun_recommend', name: '推荐榜' }\n        ]\n      }\n      \n      this.currentRankings = siteRankings[site.id] || [\n        { id: `${site.id}_default`, name: '默认榜单' }\n      ]\n    },\n    \n    /**\n     * 加载频道榜单\n     */\n    loadChannelRankings(site, channel) {\n      // 模拟频道榜单数据\n      this.currentRankings = [\n        { id: `${site.id}_${channel.id}_hot`, name: `${channel.name}热门榜` },\n        { id: `${site.id}_${channel.id}_new`, name: `${channel.name}新作榜` }\n      ]\n    },\n    \n    /**\n     * 加载夹子书籍列表\n     */\n    loadJiaziBooks() {\n      // 模拟夹子书籍数据\n      this.books = Array.from({ length: 50 }, (_, index) => ({\n        id: `book_${index + 1}`,\n        title: `重生之农女${index + 1}`,\n        collections: 193 + Math.floor(Math.random() * 1000),\n        collectionChange: Math.floor(Math.random() * 100) - 50,\n        rankChange: Math.floor(Math.random() * 10) - 5\n      }))\n    },\n    \n    /**\n     * 搜索输入\n     */\n    onSearchInput(e) {\n      console.log('搜索:', e.detail.value)\n      // 这里可以实现搜索逻辑\n    },\n    \n    /**\n     * 跳转到榜单详情\n     */\n    goToRankingDetail(ranking) {\n      // 如果是夹子榜单，直接在当前页面显示书籍列表\n      if (ranking.type === 'books') {\n        this.level = 3\n        this.currentRankingTitle = ranking.name\n        this.loadJiaziBooks()\n        return\n      }\n      \n      // 其他榜单跳转到详情页\n      uni.navigateTo({\n        url: `/pages/ranking/detail?id=${ranking.id}&name=${encodeURIComponent(ranking.name)}`\n      })\n    },\n    \n    /**\n     * 处理书籍点击（BookList组件事件）\n     */\n    handleBookTap({ book, index }) {\n      this.goToBookDetail(book)\n    },\n\n    /**\n     * 跳转到书籍详情\n     */\n    goToBookDetail(book) {\n      uni.navigateTo({\n        url: `/pages/book/detail?id=${book.id}`\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.ranking-page {\n  min-height: 100vh;\n  background-color: #f4f0eb;\n  padding-bottom: $safe-area-bottom;\n}\n\n.search-section {\n  padding: 32rpx;\n  \n  .search-container {\n    display: flex;\n    align-items: center;\n    background-color: #ffffff;\n    border-radius: 48rpx;\n    padding: 0 32rpx;\n    height: 96rpx;\n    \n    .search-icon {\n      font-size: 32rpx;\n      color: #999999;\n      margin-right: 16rpx;\n    }\n    \n    .search-input {\n      flex: 1;\n      font-size: 32rpx;\n      color: #333333;\n      \n      &::placeholder {\n        color: #999999;\n      }\n    }\n  }\n}\n\n.sites-section {\n  padding: 0 32rpx 32rpx;\n  \n  .sites-scroll {\n    white-space: nowrap;\n  }\n  \n  .sites-container {\n    display: flex;\n    gap: 16rpx;\n    \n    .site-tag {\n      flex-shrink: 0;\n      background-color: #c3c3c3;\n      border-radius: 32rpx;\n      padding: 16rpx 32rpx;\n      \n      .site-text {\n        font-size: 28rpx;\n        color: #333333;\n        white-space: nowrap;\n      }\n      \n      &.active {\n        background-color: #64a347;\n        \n        .site-text {\n          color: #ffffff;\n          font-weight: 600;\n        }\n      }\n    }\n  }\n}\n\n.channels-section {\n  padding: 0 32rpx 32rpx;\n  \n  .channels-scroll {\n    white-space: nowrap;\n  }\n  \n  .channels-container {\n    display: flex;\n    gap: 16rpx;\n    \n    .channel-tag {\n      flex-shrink: 0;\n      background-color: #e0e0e0;\n      border-radius: 24rpx;\n      padding: 12rpx 24rpx;\n      \n      .channel-text {\n        font-size: 24rpx;\n        color: #666666;\n        white-space: nowrap;\n      }\n      \n      &.active {\n        background-color: #64a347;\n        \n        .channel-text {\n          color: #ffffff;\n          font-weight: 500;\n        }\n      }\n    }\n  }\n}\n\n.content-section {\n  padding: 0 32rpx;\n}\n\n.books-section {\n  .books-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 32rpx;\n    \n    .books-title {\n      font-size: 36rpx;\n      font-weight: 600;\n      color: #333333;\n    }\n    \n    .books-count {\n      font-size: 28rpx;\n      color: #666666;\n    }\n  }\n  \n  .books-list {\n    .book-item {\n      display: flex;\n      align-items: center;\n      background-color: #c3c3c3;\n      border-radius: 16rpx;\n      padding: 24rpx;\n      margin-bottom: 16rpx;\n      \n      .book-rank {\n        width: 48rpx;\n        height: 48rpx;\n        background-color: #999999;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 24rpx;\n        font-weight: 600;\n        color: #ffffff;\n        margin-right: 24rpx;\n      }\n      \n      .book-info {\n        flex: 1;\n        \n        .book-title {\n          display: block;\n          font-size: 32rpx;\n          font-weight: 500;\n          color: #333333;\n          margin-bottom: 8rpx;\n        }\n        \n        .book-stats {\n          display: flex;\n          align-items: center;\n          gap: 24rpx;\n          \n          .book-collections {\n            font-size: 24rpx;\n            color: #666666;\n          }\n          \n          .book-changes {\n            display: flex;\n            gap: 16rpx;\n            \n            .collection-change,\n            .rank-change {\n              font-size: 24rpx;\n              font-weight: 500;\n              \n              &.positive {\n                color: #34c759;\n              }\n              \n              &.negative {\n                color: #ff3b30;\n              }\n            }\n          }\n        }\n      }\n      \n      &:active {\n        opacity: 0.8;\n      }\n    }\n  }\n}\n\n.rankings-section {\n  .rankings-list {\n    .ranking-item {\n      background-color: #c3c3c3;\n      border-radius: 16rpx;\n      padding: 32rpx;\n      margin-bottom: 16rpx;\n      \n      .ranking-name {\n        font-size: 32rpx;\n        font-weight: 500;\n        color: #333333;\n      }\n      \n      &:active {\n        opacity: 0.8;\n      }\n    }\n  }\n}\n</style> ","import MiniProgramPage from '/Users/guliyu/weixin-miniapp/JJClawler-frontend/JJClawler-frontend/pages/ranking/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["getSiteById","getSitesList","uni","getChannelsBySiteId"],"mappings":"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"}