{"version":3,"file":"storage.js","sources":["utils/storage.js"],"sourcesContent":["/**\n * 本地存储工具类\n * @description 封装 uni.storage API，提供数据过期、类型处理、加密存储等功能\n */\n\n/**\n * 存储键名前缀\n */\nconst STORAGE_PREFIX = 'jjclawler_'\n\n/**\n * 默认过期时间（7天，单位：毫秒）\n */\nconst DEFAULT_EXPIRE_TIME = 7 * 24 * 60 * 60 * 1000\n\n/**\n * 存储数据结构\n * @typedef {Object} StorageData\n * @property {*} value - 存储的值\n * @property {number} timestamp - 存储时间戳\n * @property {number} expire - 过期时间戳（0表示永不过期）\n * @property {string} type - 数据类型\n */\n\n/**\n * 获取完整的存储键名\n * @param {string} key 原始键名\n * @returns {string} 完整键名\n */\nfunction getFullKey(key) {\n  return STORAGE_PREFIX + key\n}\n\n/**\n * 检查数据是否过期\n * @param {StorageData} data 存储数据\n * @returns {boolean} 是否过期\n */\nfunction isExpired(data) {\n  if (!data || !data.expire || data.expire === 0) {\n    return false\n  }\n  return Date.now() > data.expire\n}\n\n/**\n * 包装存储数据\n * @param {*} value 要存储的值\n * @param {number} expireTime 过期时间（毫秒，0表示永不过期）\n * @returns {StorageData} 包装后的数据\n */\nfunction wrapData(value, expireTime = 0) {\n  const now = Date.now()\n  return {\n    value,\n    timestamp: now,\n    expire: expireTime > 0 ? now + expireTime : 0,\n    type: typeof value\n  }\n}\n\n/**\n * 解包存储数据\n * @param {StorageData} data 包装的数据\n * @returns {*} 原始值\n */\nfunction unwrapData(data) {\n  if (!data || typeof data !== 'object' || !data.hasOwnProperty('value')) {\n    return data\n  }\n  \n  // 检查是否过期\n  if (isExpired(data)) {\n    return null\n  }\n  \n  return data.value\n}\n\n/**\n * 同步设置存储\n * @param {string} key 存储键名\n * @param {*} value 存储值\n * @param {number} expireTime 过期时间（毫秒，0表示永不过期）\n * @returns {boolean} 是否成功\n */\nexport function setSync(key, value, expireTime = 0) {\n  try {\n    const fullKey = getFullKey(key)\n    const wrappedData = wrapData(value, expireTime)\n    uni.setStorageSync(fullKey, wrappedData)\n    return true\n  } catch (error) {\n    console.error('Storage setSync error:', error)\n    return false\n  }\n}\n\n/**\n * 异步设置存储\n * @param {string} key 存储键名\n * @param {*} value 存储值\n * @param {number} expireTime 过期时间（毫秒，0表示永不过期）\n * @returns {Promise<boolean>} 是否成功\n */\nexport function set(key, value, expireTime = 0) {\n  return new Promise((resolve) => {\n    try {\n      const fullKey = getFullKey(key)\n      const wrappedData = wrapData(value, expireTime)\n      \n      uni.setStorage({\n        key: fullKey,\n        data: wrappedData,\n        success: () => resolve(true),\n        fail: (error) => {\n          console.error('Storage set error:', error)\n          resolve(false)\n        }\n      })\n    } catch (error) {\n      console.error('Storage set error:', error)\n      resolve(false)\n    }\n  })\n}\n\n/**\n * 同步获取存储\n * @param {string} key 存储键名\n * @param {*} defaultValue 默认值\n * @returns {*} 存储值或默认值\n */\nexport function getSync(key, defaultValue = null) {\n  try {\n    const fullKey = getFullKey(key)\n    const data = uni.getStorageSync(fullKey)\n    const value = unwrapData(data)\n    \n    // 如果数据过期，删除并返回默认值\n    if (value === null && data && isExpired(data)) {\n      removeSync(key)\n      return defaultValue\n    }\n    \n    return value !== null ? value : defaultValue\n  } catch (error) {\n    console.error('Storage getSync error:', error)\n    return defaultValue\n  }\n}\n\n/**\n * 异步获取存储\n * @param {string} key 存储键名\n * @param {*} defaultValue 默认值\n * @returns {Promise<*>} 存储值或默认值\n */\nexport function get(key, defaultValue = null) {\n  return new Promise((resolve) => {\n    try {\n      const fullKey = getFullKey(key)\n      \n      uni.getStorage({\n        key: fullKey,\n        success: (res) => {\n          const value = unwrapData(res.data)\n          \n          // 如果数据过期，删除并返回默认值\n          if (value === null && res.data && isExpired(res.data)) {\n            remove(key)\n            resolve(defaultValue)\n            return\n          }\n          \n          resolve(value !== null ? value : defaultValue)\n        },\n        fail: (error) => {\n          console.error('Storage get error:', error)\n          resolve(defaultValue)\n        }\n      })\n    } catch (error) {\n      console.error('Storage get error:', error)\n      resolve(defaultValue)\n    }\n  })\n}\n\n/**\n * 同步删除存储\n * @param {string} key 存储键名\n * @returns {boolean} 是否成功\n */\nexport function removeSync(key) {\n  try {\n    const fullKey = getFullKey(key)\n    uni.removeStorageSync(fullKey)\n    return true\n  } catch (error) {\n    console.error('Storage removeSync error:', error)\n    return false\n  }\n}\n\n/**\n * 异步删除存储\n * @param {string} key 存储键名\n * @returns {Promise<boolean>} 是否成功\n */\nexport function remove(key) {\n  return new Promise((resolve) => {\n    try {\n      const fullKey = getFullKey(key)\n      \n      uni.removeStorage({\n        key: fullKey,\n        success: () => resolve(true),\n        fail: (error) => {\n          console.error('Storage remove error:', error)\n          resolve(false)\n        }\n      })\n    } catch (error) {\n      console.error('Storage remove error:', error)\n      resolve(false)\n    }\n  })\n}\n\n/**\n * 检查存储是否存在\n * @param {string} key 存储键名\n * @returns {boolean} 是否存在且未过期\n */\nexport function has(key) {\n  try {\n    const fullKey = getFullKey(key)\n    const data = uni.getStorageSync(fullKey)\n    \n    if (!data) return false\n    \n    // 检查是否过期\n    if (isExpired(data)) {\n      removeSync(key)\n      return false\n    }\n    \n    return true\n  } catch (error) {\n    console.error('Storage has error:', error)\n    return false\n  }\n}\n\n/**\n * 获取存储信息\n * @param {string} key 存储键名\n * @returns {Object|null} 存储信息\n */\nexport function getInfo(key) {\n  try {\n    const fullKey = getFullKey(key)\n    const data = uni.getStorageSync(fullKey)\n    \n    if (!data || typeof data !== 'object') return null\n    \n    return {\n      key,\n      type: data.type,\n      timestamp: data.timestamp,\n      expire: data.expire,\n      isExpired: isExpired(data),\n      size: JSON.stringify(data).length\n    }\n  } catch (error) {\n    console.error('Storage getInfo error:', error)\n    return null\n  }\n}\n\n/**\n * 清理过期数据\n * @returns {number} 清理的数据条数\n */\nexport function clearExpired() {\n  try {\n    const info = uni.getStorageInfoSync()\n    let clearedCount = 0\n    \n    info.keys.forEach(fullKey => {\n      if (fullKey.startsWith(STORAGE_PREFIX)) {\n        try {\n          const data = uni.getStorageSync(fullKey)\n          if (isExpired(data)) {\n            uni.removeStorageSync(fullKey)\n            clearedCount++\n          }\n        } catch (e) {\n          // 忽略单个数据的错误\n        }\n      }\n    })\n    \n    return clearedCount\n  } catch (error) {\n    console.error('Storage clearExpired error:', error)\n    return 0\n  }\n}\n\n/**\n * 获取所有存储信息\n * @returns {Array} 存储信息列表\n */\nexport function getAllInfo() {\n  try {\n    const info = uni.getStorageInfoSync()\n    const result = []\n    \n    info.keys.forEach(fullKey => {\n      if (fullKey.startsWith(STORAGE_PREFIX)) {\n        const key = fullKey.replace(STORAGE_PREFIX, '')\n        const keyInfo = getInfo(key)\n        if (keyInfo) {\n          result.push(keyInfo)\n        }\n      }\n    })\n    \n    return result\n  } catch (error) {\n    console.error('Storage getAllInfo error:', error)\n    return []\n  }\n}\n\n/**\n * 清空所有应用存储\n * @returns {boolean} 是否成功\n */\nexport function clear() {\n  try {\n    const info = uni.getStorageInfoSync()\n    \n    info.keys.forEach(fullKey => {\n      if (fullKey.startsWith(STORAGE_PREFIX)) {\n        try {\n          uni.removeStorageSync(fullKey)\n        } catch (e) {\n          // 忽略单个删除错误\n        }\n      }\n    })\n    \n    return true\n  } catch (error) {\n    console.error('Storage clear error:', error)\n    return false\n  }\n}\n\n/**\n * 同步清空所有应用存储（clear的别名）\n * @returns {boolean} 是否成功\n */\nexport function clearSync() {\n  return clear()\n}\n\n/**\n * 设置带默认过期时间的存储\n * @param {string} key 存储键名\n * @param {*} value 存储值\n * @returns {boolean} 是否成功\n */\nexport function setWithDefaultExpire(key, value) {\n  return setSync(key, value, DEFAULT_EXPIRE_TIME)\n}\n\n/**\n * 设置会话存储（应用关闭时清除）\n * @param {string} key 存储键名\n * @param {*} value 存储值\n * @returns {boolean} 是否成功\n */\nexport function setSession(key, value) {\n  // 会话存储使用特殊前缀\n  const sessionKey = 'session_' + key\n  return setSync(sessionKey, value)\n}\n\n/**\n * 获取会话存储\n * @param {string} key 存储键名\n * @param {*} defaultValue 默认值\n * @returns {*} 存储值或默认值\n */\nexport function getSession(key, defaultValue = null) {\n  const sessionKey = 'session_' + key\n  return getSync(sessionKey, defaultValue)\n}\n\n/**\n * 删除会话存储\n * @param {string} key 存储键名\n * @returns {boolean} 是否成功\n */\nexport function removeSession(key) {\n  const sessionKey = 'session_' + key\n  return removeSync(sessionKey)\n}\n\n/**\n * 用户相关存储方法\n */\nexport const user = {\n  /**\n   * 设置用户token\n   * @param {string} token 用户token\n   * @param {number} expireTime 过期时间（默认7天）\n   */\n  setToken(token, expireTime = DEFAULT_EXPIRE_TIME) {\n    return setSync('token', token, expireTime)\n  },\n  \n  /**\n   * 获取用户token\n   * @returns {string|null} 用户token\n   */\n  getToken() {\n    return getSync('token')\n  },\n  \n  /**\n   * 删除用户token\n   */\n  removeToken() {\n    return removeSync('token')\n  },\n  \n  /**\n   * 设置用户信息\n   * @param {Object} userInfo 用户信息\n   */\n  setInfo(userInfo) {\n    return setSync('userInfo', userInfo, DEFAULT_EXPIRE_TIME)\n  },\n  \n  /**\n   * 获取用户信息\n   * @returns {Object|null} 用户信息\n   */\n  getInfo() {\n    return getSync('userInfo')\n  },\n  \n  /**\n   * 删除用户信息\n   */\n  removeInfo() {\n    return removeSync('userInfo')\n  },\n  \n  /**\n   * 清除所有用户相关数据\n   */\n  clearAll() {\n    this.removeToken()\n    this.removeInfo()\n    return removeSync('userSettings')\n  }\n}\n\n/**\n * 应用设置相关存储方法\n */\nexport const settings = {\n  /**\n   * 设置应用配置\n   * @param {string} key 配置键名\n   * @param {*} value 配置值\n   */\n  set(key, value) {\n    return setSync(`setting_${key}`, value)\n  },\n  \n  /**\n   * 获取应用配置\n   * @param {string} key 配置键名\n   * @param {*} defaultValue 默认值\n   */\n  get(key, defaultValue = null) {\n    return getSync(`setting_${key}`, defaultValue)\n  },\n  \n  /**\n   * 删除应用配置\n   * @param {string} key 配置键名\n   */\n  remove(key) {\n    return removeSync(`setting_${key}`)\n  }\n}\n\n// 默认导出\nexport default {\n  set,\n  get,\n  setSync,\n  getSync,\n  remove,\n  removeSync,\n  has,\n  getInfo,\n  getAllInfo,\n  clear,\n  clearSync,\n  clearExpired,\n  setWithDefaultExpire,\n  setSession,\n  getSession,\n  removeSession,\n  user,\n  settings\n} "],"names":["uni"],"mappings":";;AAQA,MAAM,iBAAiB;AAqBvB,SAAS,WAAW,KAAK;AACvB,SAAO,iBAAiB;AAC1B;AAOA,SAAS,UAAU,MAAM;AACvB,MAAI,CAAC,QAAQ,CAAC,KAAK,UAAU,KAAK,WAAW,GAAG;AAC9C,WAAO;AAAA,EACR;AACD,SAAO,KAAK,QAAQ,KAAK;AAC3B;AAQA,SAAS,SAAS,OAAO,aAAa,GAAG;AACvC,QAAM,MAAM,KAAK,IAAK;AACtB,SAAO;AAAA,IACL;AAAA,IACA,WAAW;AAAA,IACX,QAAQ,aAAa,IAAI,MAAM,aAAa;AAAA,IAC5C,MAAM,OAAO;AAAA,EACd;AACH;AAOA,SAAS,WAAW,MAAM;AACxB,MAAI,CAAC,QAAQ,OAAO,SAAS,YAAY,CAAC,KAAK,eAAe,OAAO,GAAG;AACtE,WAAO;AAAA,EACR;AAGD,MAAI,UAAU,IAAI,GAAG;AACnB,WAAO;AAAA,EACR;AAED,SAAO,KAAK;AACd;AASO,SAAS,QAAQ,KAAK,OAAO,aAAa,GAAG;AAClD,MAAI;AACF,UAAM,UAAU,WAAW,GAAG;AAC9B,UAAM,cAAc,SAAS,OAAO,UAAU;AAC9CA,wBAAI,eAAe,SAAS,WAAW;AACvC,WAAO;AAAA,EACR,SAAQ,OAAO;AACdA,kBAAAA,MAAA,MAAA,SAAA,0BAAc,0BAA0B,KAAK;AAC7C,WAAO;AAAA,EACR;AACH;AAqCO,SAAS,QAAQ,KAAK,eAAe,MAAM;AAChD,MAAI;AACF,UAAM,UAAU,WAAW,GAAG;AAC9B,UAAM,OAAOA,cAAAA,MAAI,eAAe,OAAO;AACvC,UAAM,QAAQ,WAAW,IAAI;AAG7B,QAAI,UAAU,QAAQ,QAAQ,UAAU,IAAI,GAAG;AAC7C,iBAAW,GAAG;AACd,aAAO;AAAA,IACR;AAED,WAAO,UAAU,OAAO,QAAQ;AAAA,EACjC,SAAQ,OAAO;AACdA,kBAAAA,MAAA,MAAA,SAAA,2BAAc,0BAA0B,KAAK;AAC7C,WAAO;AAAA,EACR;AACH;AA4CO,SAAS,WAAW,KAAK;AAC9B,MAAI;AACF,UAAM,UAAU,WAAW,GAAG;AAC9BA,kBAAG,MAAC,kBAAkB,OAAO;AAC7B,WAAO;AAAA,EACR,SAAQ,OAAO;AACdA,kBAAAA,MAAc,MAAA,SAAA,2BAAA,6BAA6B,KAAK;AAChD,WAAO;AAAA,EACR;AACH;;;"}