---
description: 
globs: 
alwaysApply: true
---
# Cursor 通用工作流程规则

## 工作流程概述

对于任何开发任务，Cursor 必须严格按照以下四个阶段执行：**理解 → 规划 → 执行 → 检查**

## 1. 理解阶段 (Understanding)

### 目标
深入理解用户提出的需求内容，确保需求理解的准确性和完整性。

### 执行要求
- 仔细分析用户需求的每个细节
- 对任何不确定、模糊或可能有歧义的地方**必须主动询问**
- 不允许基于假设进行后续步骤
- 确认技术栈、环境要求、功能边界等关键信息

### 完成标准
- 用户明确确认需求理解正确
- 所有技术细节和业务逻辑清晰明确

## 2. 规划阶段 (Planning)

### 目标
根据理解的内容制定详细的技术方案和任务执行顺序。

### 执行要求
- 制定完整的技术实现方案
- 将任务分解为具体的执行步骤
- 确定文件结构、代码架构、依赖关系
- **必须将方案记录到** [memory-bank/tasks.md](mdc:memory-bank/tasks.md)

### 输出内容
- 技术方案说明
- 详细的任务执行清单
- 预期的文件修改列表
- 测试策略

## 3. 执行阶段 (Execution)

### 目标
严格按照规划的任务顺序进行代码实现和文件修改。

### 执行要求
- 严格按照规划阶段制定的顺序执行
- 不允许偏离既定方案，如需调整必须回到规划阶段
- **必须将执行的关键步骤记录到** [memory-bank/task-records.json](mdc:memory-bank/task-records.json)
- 每个步骤完成后更新进度状态

### 记录内容
- 执行时间戳
- 具体操作内容
- 修改的文件列表
- 遇到的问题和解决方案

## 4. 检查阶段 (Verification)

### 目标
验证执行结果是否完全符合规划要求，确保代码质量。

### 执行要求
- 对比执行结果与规划方案，检查是否有遗漏或多余内容
- 如发现不符合规划的内容，**必须进行修正**
- **必须生成相应的测试文件验证代码功能**
- 运行测试确保代码正常工作

### 验证清单
- [ ] 所有规划的功能都已实现
- [ ] 没有额外的无关代码
- [ ] 代码符合项目规范
- [ ] 测试文件已创建并通过
- [ ] 文档已更新

## 流程控制规范

### 流程状态管理
- 每次交互开始时**必须明确告知**当前处于哪个流程阶段
- 每次交互结束时**必须说明**下一步将进入哪个流程
- 流程开始和结束时**必须更新** [memory-bank/task-records.json](mdc:memory-bank/task-records.json)
- 流程完成情况**必须同步更新** [memory-bank/tasks.md](mdc:memory-bank/tasks.md)

### 命令字段支持
用户可以通过以下命令指定任务进行到特定流程：
- `/init` - 进入理解阶段
- `/plan` - 进入规划阶段  
- `/action` - 进入执行阶段
- `/check` - 进入检查阶段
- `/status` - 查看当前流程状态

### 状态记录格式

#### tasks.md 格式
```markdown
# 任务列表

## 当前任务：[任务名称]
- 状态：[理解中/规划中/执行中/检查中/已完成]
- 开始时间：[时间戳]
- 预计完成时间：[时间戳]

### 技术方案
[详细技术方案]

### 任务清单
- [ ] 任务1
- [ ] 任务2
- [x] 已完成任务
```

#### task-records.json 格式
```json
{
  "currentTask": "任务名称",
  "currentPhase": "理解/规划/执行/检查",
  "startTime": "ISO时间戳",
  "phaseHistory": [
    {
      "phase": "理解",
      "startTime": "ISO时间戳",
      "endTime": "ISO时间戳",
      "status": "completed/in-progress",
      "notes": "关键记录"
    }
  ],
  "executionLog": [
    {
      "timestamp": "ISO时间戳",
      "action": "具体操作",
      "files": ["修改的文件列表"],
      "result": "操作结果"
    }
  ]
}
```

## 强制执行规则

1. **不允许跳过任何阶段**
2. **每个阶段必须有明确的完成标准**
3. **所有关键信息必须记录到指定文件**
4. **用户确认后才能进入下一阶段**
5. **发现问题必须回到相应阶段重新处理**

## 异常处理

- 如果执行过程中发现规划有误，立即停止并回到规划阶段
- 如果用户需求发生变化，回到理解阶段重新开始
- 如果测试失败，回到执行阶段进行修正
- 所有异常情况都必须记录到task-records.json中

