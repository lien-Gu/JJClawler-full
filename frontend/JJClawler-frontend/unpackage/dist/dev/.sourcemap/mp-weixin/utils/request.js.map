{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\n * 网络请求工具类\n * @description 封装 uni.request，提供统一的请求配置、错误处理、拦截器等功能\n */\n\n// 基础配置\nconst BASE_URL = 'https://api.jjclawler.com' // 替换为实际的API地址\nconst TIMEOUT = 10000 // 请求超时时间\n\n/**\n * HTTP状态码映射\n */\nconst HTTP_STATUS = {\n  SUCCESS: 200,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  SERVER_ERROR: 500\n}\n\n/**\n * 错误信息映射\n */\nconst ERROR_MESSAGES = {\n  [HTTP_STATUS.UNAUTHORIZED]: '未授权，请重新登录',\n  [HTTP_STATUS.FORBIDDEN]: '拒绝访问',\n  [HTTP_STATUS.NOT_FOUND]: '请求的资源不存在',\n  [HTTP_STATUS.SERVER_ERROR]: '服务器内部错误',\n  'NETWORK_ERROR': '网络连接异常',\n  'TIMEOUT': '请求超时',\n  'UNKNOWN': '未知错误'\n}\n\n/**\n * 请求拦截器\n * @param {Object} config 请求配置\n * @returns {Object} 处理后的配置\n */\nfunction requestInterceptor(config) {\n  // 添加基础URL\n  if (!config.url.startsWith('http')) {\n    config.url = BASE_URL + config.url\n  }\n  \n  // 添加通用请求头\n  config.header = {\n    'Content-Type': 'application/json',\n    ...config.header\n  }\n  \n  // 添加认证token（如果存在）\n  const token = uni.getStorageSync('token')\n  if (token) {\n    config.header.Authorization = `Bearer ${token}`\n  }\n  \n  // 添加设备信息\n  const systemInfo = uni.getSystemInfoSync()\n  config.header['User-Agent'] = `JJClawler/${systemInfo.platform} ${systemInfo.version}`\n  \n  // 显示加载提示\n  if (config.showLoading !== false) {\n    uni.showLoading({\n      title: config.loadingText || '加载中...',\n      mask: true\n    })\n  }\n  \n  console.log('请求发送:', config)\n  return config\n}\n\n/**\n * 响应拦截器\n * @param {Object} response 响应数据\n * @param {Object} config 请求配置\n * @returns {Promise} 处理后的响应\n */\nfunction responseInterceptor(response, config) {\n  // 隐藏加载提示\n  if (config.showLoading !== false) {\n    uni.hideLoading()\n  }\n  \n  console.log('响应接收:', response)\n  \n  const { statusCode, data } = response\n  \n  // HTTP状态码检查\n  if (statusCode === HTTP_STATUS.SUCCESS) {\n    // 业务状态码检查\n    if (data.code === 0 || data.success === true) {\n      return Promise.resolve(data.data || data)\n    } else {\n      // 业务错误\n      const errorMsg = data.message || data.msg || '请求失败'\n      return Promise.reject({\n        type: 'BUSINESS_ERROR',\n        code: data.code,\n        message: errorMsg,\n        data: data\n      })\n    }\n  } else {\n    // HTTP错误\n    const errorMsg = ERROR_MESSAGES[statusCode] || ERROR_MESSAGES.UNKNOWN\n    return Promise.reject({\n      type: 'HTTP_ERROR',\n      code: statusCode,\n      message: errorMsg,\n      data: response\n    })\n  }\n}\n\n/**\n * 错误处理器\n * @param {Object} error 错误对象\n * @param {Object} config 请求配置\n */\nfunction errorHandler(error, config) {\n  // 隐藏加载提示\n  if (config.showLoading !== false) {\n    uni.hideLoading()\n  }\n  \n  console.error('请求错误:', error)\n  \n  let errorMessage = ERROR_MESSAGES.UNKNOWN\n  \n  if (error.type === 'BUSINESS_ERROR' || error.type === 'HTTP_ERROR') {\n    errorMessage = error.message\n  } else if (error.errMsg) {\n    if (error.errMsg.includes('timeout')) {\n      errorMessage = ERROR_MESSAGES.TIMEOUT\n    } else if (error.errMsg.includes('fail')) {\n      errorMessage = ERROR_MESSAGES.NETWORK_ERROR\n    }\n  }\n  \n  // 显示错误提示（如果配置允许）\n  if (config.showError !== false) {\n    uni.showToast({\n      title: errorMessage,\n      icon: 'none',\n      duration: 2000\n    })\n  }\n  \n  return Promise.reject({\n    ...error,\n    message: errorMessage\n  })\n}\n\n/**\n * 核心请求方法\n * @param {Object} options 请求选项\n * @returns {Promise} 请求Promise\n */\nfunction request(options = {}) {\n  return new Promise((resolve, reject) => {\n    // 合并默认配置\n    const config = {\n      method: 'GET',\n      timeout: TIMEOUT,\n      showLoading: true,\n      showError: true,\n      ...options\n    }\n    \n    // 请求拦截\n    const interceptedConfig = requestInterceptor(config)\n    \n    // 发送请求\n    uni.request({\n      ...interceptedConfig,\n      success: (response) => {\n        responseInterceptor(response, config)\n          .then(resolve)\n          .catch(reject)\n      },\n      fail: (error) => {\n        errorHandler(error, config)\n          .catch(reject)\n      }\n    })\n  })\n}\n\n/**\n * GET请求\n * @param {String} url 请求地址\n * @param {Object} params 请求参数\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport function get(url, params = {}, options = {}) {\n  return request({\n    url,\n    method: 'GET',\n    data: params,\n    ...options\n  })\n}\n\n/**\n * POST请求\n * @param {String} url 请求地址\n * @param {Object} data 请求数据\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport function post(url, data = {}, options = {}) {\n  return request({\n    url,\n    method: 'POST',\n    data,\n    ...options\n  })\n}\n\n/**\n * PUT请求\n * @param {String} url 请求地址\n * @param {Object} data 请求数据\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport function put(url, data = {}, options = {}) {\n  return request({\n    url,\n    method: 'PUT',\n    data,\n    ...options\n  })\n}\n\n/**\n * DELETE请求\n * @param {String} url 请求地址\n * @param {Object} params 请求参数\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport function del(url, params = {}, options = {}) {\n  return request({\n    url,\n    method: 'DELETE',\n    data: params,\n    ...options\n  })\n}\n\n/**\n * 文件上传\n * @param {String} url 上传地址\n * @param {String} filePath 文件路径\n * @param {Object} formData 表单数据\n * @param {Object} options 其他选项\n * @returns {Promise} 上传Promise\n */\nexport function upload(url, filePath, formData = {}, options = {}) {\n  return new Promise((resolve, reject) => {\n    // 显示上传进度\n    if (options.showProgress !== false) {\n      uni.showLoading({\n        title: '上传中...',\n        mask: true\n      })\n    }\n    \n    // 添加认证token\n    const header = { ...options.header }\n    const token = uni.getStorageSync('token')\n    if (token) {\n      header.Authorization = `Bearer ${token}`\n    }\n    \n    uni.uploadFile({\n      url: url.startsWith('http') ? url : BASE_URL + url,\n      filePath,\n      name: options.name || 'file',\n      formData,\n      header,\n      success: (response) => {\n        if (options.showProgress !== false) {\n          uni.hideLoading()\n        }\n        \n        try {\n          const data = JSON.parse(response.data)\n          if (data.code === 0 || data.success === true) {\n            resolve(data.data || data)\n          } else {\n            reject({\n              type: 'BUSINESS_ERROR',\n              message: data.message || '上传失败'\n            })\n          }\n        } catch (e) {\n          reject({\n            type: 'PARSE_ERROR',\n            message: '响应数据解析失败'\n          })\n        }\n      },\n      fail: (error) => {\n        if (options.showProgress !== false) {\n          uni.hideLoading()\n        }\n        \n        let errorMessage = '上传失败'\n        if (error.errMsg && error.errMsg.includes('fail')) {\n          errorMessage = '网络连接异常'\n        }\n        \n        if (options.showError !== false) {\n          uni.showToast({\n            title: errorMessage,\n            icon: 'none'\n          })\n        }\n        \n        reject({\n          type: 'UPLOAD_ERROR',\n          message: errorMessage,\n          error\n        })\n      }\n    })\n  })\n}\n\n/**\n * 设置基础URL\n * @param {String} baseUrl 基础URL\n */\nexport function setBaseURL(baseUrl) {\n  BASE_URL = baseUrl\n}\n\n/**\n * 设置请求超时时间\n * @param {Number} timeout 超时时间（毫秒）\n */\nexport function setTimeout(timeout) {\n  TIMEOUT = timeout\n}\n\n// 默认导出\nexport default {\n  get,\n  post,\n  put,\n  delete: del,\n  upload,\n  request,\n  setBaseURL,\n  setTimeout\n} "],"names":["uni"],"mappings":"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"}